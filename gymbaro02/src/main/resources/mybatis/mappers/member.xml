<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.member">
	<resultMap type="MemberVO" id="memberResult">
		<result property="uid" column="uid" />
		<result property="member_id" column="member_id" />
		<result property="member_pwd" column="member_pwd" />
		<result property="member_name" column="member_name" />
		<result property="member_gender" column="member_gender" />
		
		<result property="member_type" column="member_type" />
		<result property="member_level" column="member_level" />
		<result property="member_point" column="member_point" />
		
		<result property="phone_number" column="phone_number" />
		<result property="email" column="email" />
		<result property="pwdFindQ" column="pwdFindQ" />
		<result property="pwdFindA" column="pwdFindA" />
		
		<result property="zipcode" column="zipcode" />
		<result property="roadAddress" column="roadAddress" />
		<result property="jibunAddress" column="jibunAddress" />
		<result property="extraAddress" column="extraAddress" />
		
		<result property="info_yn" column="info_yn" />
		<result property="joinDate" column="joinDate" />
		<result property="gym_license" column="gym_license" />
		<result property="SALT" column="SALT" />
	</resultMap>
	<resultMap type="KakaoDTO" id="kdto">
		<result property="k_number" column="k_number" />
		<result property="k_name" column="k_name" />
		<result property="k_email" column="k_email" />
	</resultMap>


<select id="login" parameterType="java.util.Map" resultMap="memberResult">
	select * from member where member_id = #{id} and member_pwd = #{pwd}
</select>

<select id="selectDeletedMember" resultMap="memberResult">
	select uid from member where del_yn = 'Y'
</select>

<update id="deletedMemberUpdate" parameterType="memberVO">
	update member
	<set>member_name = 'N',
		member_pwd = 'N',
		member_gender = 'N',
        member_type = 'N',
        member_point = 0,
        phone_number = 'N',
        email = 'N',
        pwdFindQ = 'N',
        pwdFindA = 'N',
        zipcode = 'N',
        roadAddress = 'N',
        jibunAddress = 'N',
        extraAddress = 'N',
        info_yn = 'N',
        deletedDate = now(),
        SALT = 'N'</set>
	where uid = #{uid}
</update>

<select id="getSaltbyId" parameterType="String" resultType="String">
	select SALT from member where member_id = #{id}
</select>

<insert id="insertNewMember" parameterType="memberVO">
	<selectKey resultType="int" keyProperty="uid" order="BEFORE">
	    	select case count(*) when 0 then 1 else max(uid) + 1 end from member
	</selectKey>
	<![CDATA[
			insert into member(
				uid,
				member_id,
				member_pwd,
				member_name,
				member_gender,
				member_type,
				member_level,
				member_point,
				phone_number,
				email,
				pwdFindQ,
				pwdFindA,
				zipcode,
				roadAddress,
				jibunAddress,
				extraAddress,
				info_yn,
				gym_license,
				SALT				
			) values(
				#{uid},
				#{member_id},
				#{member_pwd},
				#{member_name},
				#{member_gender},
				#{member_type},
				#{member_level},
				#{member_point},
				#{phone_number},
				#{email},
				#{pwdFindQ},
				#{pwdFindA},
				#{zipcode},
				#{roadAddress},
				#{jibunAddress},
				#{extraAddress},
				#{info_yn},
				#{gym_license},
				#{SALT}				
			)
	]]>
</insert>

<select id="idFindSuccess" parameterType="String" resultType="String">
	select member_id from member where member_name = #{member_name} and email = #{email}
</select>

<select id="idFindSuccessByNum" parameterType="String" resultType="String">
	select member_id from member where member_name = #{member_name} and phone_number = #{phone_number}
</select>

<select id="newPwdForm" parameterType="String" resultType="String">
	select member_name from member where member_id = #{member_id} and pwdFindQ = #{pwdFindQ} and pwdFindA = #{pwdFindA}
</select>

<update id="pwdFindSuccess" parameterType="String">
	update member set member_pwd = #{newPwd} where member_id = #{member_id}
</update>

<select id="findMemberName" parameterType="String" resultType="String">
	select member_name from member where member_id = #{member_id}
</select>


<select id="selectOverlappedID" parameterType="String" resultType="String">
	   select if(count(*)>0, 'true', 'false')
	   from member
	   where member_id = #{id}
</select>

<!-- 카카오 로그인 -->
<select id="findKakao" parameterType="java.util.HashMap" resultMap="memberResult">
		select * from member where member_name=#{nickname} and member_id=#{email}
	</select>


<insert id="kakaoInsert" parameterType="java.util.HashMap">
		<selectKey resultType="int" keyProperty="uid" order="BEFORE">
	    	select case count(*) when 0 then 1 else max(uid) + 1 end from member
		</selectKey>
		insert into member(uid, member_name, member_id, member_type) values(#{uid}, #{nickname}, #{email}, 'SNS')
</insert>
	
</mapper>